{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\INFRAMINDS\\\\ChatBot\\\\frontend\\\\src\\\\LayoutCanvas.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { Stage, Layer, Line, Text } from \"react-konva\";\n\n// export default function LayoutCanvas({ layout }) {\n//   const width = 600, height = 450;\n\n//   // Filter out rooms with less than 3 points (invalid polygons)\n//   const validRooms = layout.filter(room => room.points.length >= 3);\n\n//   // Compute scaling and centering\n//   const allPoints = validRooms.flatMap(room => room.points);\n//   if (allPoints.length === 0) {\n//     // Nothing to render\n//     return (\n//       <div className=\"text-gray-400 text-lg\">\n//         No valid rooms to display.\n//       </div>\n//     );\n//   }\n//   const xs = allPoints.map(p => p[0]);\n//   const ys = allPoints.map(p => p[1]);\n//   const minX = Math.min(...xs), maxX = Math.max(...xs);\n//   const minY = Math.min(...ys), maxY = Math.max(...ys);\n\n//   // Calculate scale to fit the canvas with some margin\n//   const margin = 40;\n//   const scale = Math.min(\n//     (width - margin * 2) / (maxX - minX || 1),\n//     (height - margin * 2) / (maxY - minY || 1)\n//   );\n//   const offsetX = margin - minX * scale + (width - (maxX - minX) * scale) / 2 - margin;\n//   const offsetY = margin - minY * scale + (height - (maxY - minY) * scale) / 2 - margin;\n\n//   // Helper to get centroid for label placement\n//   const getCentroid = (points) => {\n//     const n = points.length;\n//     const sum = points.reduce(\n//       (acc, [x, y]) => [acc[0] + x, acc[1] + y],\n//       [0, 0]\n//     );\n//     return [sum[0] / n, sum[1] / n];\n//   };\n\n//   return (\n//     <Stage width={width} height={height}>\n//       <Layer>\n//         {validRooms.map((room, idx) => {\n//           // Scale and center points\n//           const scaledPoints = room.points.flatMap(([x, y]) => [\n//             x * scale + offsetX,\n//             y * scale + offsetY,\n//           ]);\n//           // Centroid for label\n//           const [cx, cy] = getCentroid(\n//             room.points.map(([x, y]) => [\n//               x * scale + offsetX,\n//               y * scale + offsetY,\n//             ])\n//           );\n//           return (\n//             <React.Fragment key={room.name + idx}>\n//               <Line\n//                 points={scaledPoints}\n//                 closed\n//                 fill=\"#e0e7ff\"\n//                 stroke=\"#1e293b\"\n//                 strokeWidth={2}\n//               />\n//               <Text\n//                 text={room.name}\n//                 x={cx - room.name.length * 4}\n//                 y={cy - 8}\n//                 fontSize={16}\n//                 fill=\"#1e293b\"\n//                 fontStyle=\"bold\"\n//               />\n//             </React.Fragment>\n//           );\n//         })}\n//       </Layer>\n//     </Stage>\n//   );\n// }\n\nimport React, { useRef, useState } from \"react\";\nimport { Stage, Layer, Line, Text, Group, Rect } from \"react-konva\";\nimport { getRoomColor, snapPointToGrid } from \"./utils/layoutHelpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 600;\nconst CANVAS_HEIGHT = 450;\nconst GRID_SIZE = 25;\nexport default function LayoutCanvas({\n  layout,\n  onSelectRoom,\n  selectedRoom,\n  onDeleteRoom,\n  onUpdateRoom\n}) {\n  _s();\n  // Zoom and pan\n  const stageRef = useRef();\n  const [scale, setScale] = useState(1);\n  const [stagePos, setStagePos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [hoveredRoom, setHoveredRoom] = useState(null);\n\n  // Filter out rooms with less than 3 points\n  const validRooms = layout.filter(room => room.points.length >= 3);\n\n  // Scaling and centering logic\n  const allPoints = validRooms.flatMap(room => room.points);\n  if (allPoints.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-400 text-lg\",\n      children: \"No valid rooms to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n  const xs = allPoints.map(p => p[0]);\n  const ys = allPoints.map(p => p[1]);\n  const minX = Math.min(...xs),\n    maxX = Math.max(...xs);\n  const minY = Math.min(...ys),\n    maxY = Math.max(...ys);\n  const margin = 40;\n  const fitScale = Math.min((CANVAS_WIDTH - margin * 2) / (maxX - minX || 1), (CANVAS_HEIGHT - margin * 2) / (maxY - minY || 1));\n  // Use fitScale for initial fit, then user can zoom\n  const displayScale = scale * fitScale;\n  const offsetX = margin - minX * displayScale + (CANVAS_WIDTH - (maxX - minX) * displayScale) / 2 - margin + stagePos.x;\n  const offsetY = margin - minY * displayScale + (CANVAS_HEIGHT - (maxY - minY) * displayScale) / 2 - margin + stagePos.y;\n\n  // Grid lines\n  const gridLines = [];\n  for (let i = 0; i < CANVAS_WIDTH / (GRID_SIZE * displayScale); i++) {\n    gridLines.push(/*#__PURE__*/_jsxDEV(Line, {\n      points: [i * GRID_SIZE * displayScale, 0, i * GRID_SIZE * displayScale, CANVAS_HEIGHT],\n      stroke: \"#e5e7eb\",\n      strokeWidth: 1\n    }, \"v\" + i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this));\n  }\n  for (let i = 0; i < CANVAS_HEIGHT / (GRID_SIZE * displayScale); i++) {\n    gridLines.push(/*#__PURE__*/_jsxDEV(Line, {\n      points: [0, i * GRID_SIZE * displayScale, CANVAS_WIDTH, i * GRID_SIZE * displayScale],\n      stroke: \"#e5e7eb\",\n      strokeWidth: 1\n    }, \"h\" + i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this));\n  }\n\n  // Helper: centroid for label\n  const getCentroid = points => {\n    const n = points.length;\n    const sum = points.reduce((acc, [x, y]) => [acc[0] + x, acc[1] + y], [0, 0]);\n    return [sum[0] / n, sum[1] / n];\n  };\n\n  // Drag/resize logic\n  const handleDragMove = (idx, e) => {\n    const node = e.target;\n    const dx = node.x() - node._lastPos.x;\n    const dy = node.y() - node._lastPos.y;\n    node._lastPos = {\n      x: node.x(),\n      y: node.y()\n    };\n    const newPoints = layout[idx].points.map(([x, y]) => [snapPointToGrid(x + dx / displayScale, GRID_SIZE), snapPointToGrid(y + dy / displayScale, GRID_SIZE)]);\n    onUpdateRoom(idx, {\n      ...layout[idx],\n      points: newPoints\n    });\n  };\n  const handleDragStart = (idx, e) => {\n    e.target._lastPos = {\n      x: e.target.x(),\n      y: e.target.y()\n    };\n  };\n\n  // Zoom and pan handlers\n  const handleWheel = e => {\n    e.evt.preventDefault();\n    const scaleBy = 1.05;\n    const oldScale = scale;\n    const mousePointTo = {\n      x: (e.evt.x - stageRef.current.x()) / oldScale,\n      y: (e.evt.y - stageRef.current.y()) / oldScale\n    };\n    const newScale = e.evt.deltaY > 0 ? oldScale / scaleBy : oldScale * scaleBy;\n    setScale(Math.max(0.5, Math.min(3, newScale)));\n    setStagePos({\n      x: e.evt.x - mousePointTo.x * newScale,\n      y: e.evt.y - mousePointTo.y * newScale\n    });\n  };\n  const handleStageDragEnd = e => {\n    setStagePos({\n      x: e.target.x(),\n      y: e.target.y()\n    });\n  };\n\n  // Tooltip\n  const [tooltip, setTooltip] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    text: \"\"\n  });\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: CANVAS_WIDTH,\n    height: CANVAS_HEIGHT,\n    ref: stageRef,\n    scaleX: 1,\n    scaleY: 1,\n    draggable: true,\n    x: stagePos.x,\n    y: stagePos.y,\n    onWheel: handleWheel,\n    onDragEnd: handleStageDragEnd,\n    style: {\n      background: \"#f9fafb\",\n      borderRadius: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(Layer, {\n      children: gridLines\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Layer, {\n      children: [validRooms.map((room, idx) => {\n        const scaledPoints = room.points.flatMap(([x, y]) => [x * displayScale + offsetX, y * displayScale + offsetY]);\n        const [cx, cy] = getCentroid(room.points.map(([x, y]) => [x * displayScale + offsetX, y * displayScale + offsetY]));\n        const isSelected = selectedRoom === idx;\n        const isHovered = hoveredRoom === idx;\n        return /*#__PURE__*/_jsxDEV(Group, {\n          draggable: true,\n          onDragStart: e => handleDragStart(idx, e),\n          onDragMove: e => handleDragMove(idx, e),\n          onClick: () => onSelectRoom(idx),\n          onTap: () => onSelectRoom(idx),\n          onMouseEnter: () => {\n            setHoveredRoom(idx);\n            setTooltip({\n              visible: true,\n              x: cx,\n              y: cy - 30,\n              text: `Room: ${room.name}`\n            });\n          },\n          onMouseLeave: () => {\n            setHoveredRoom(null);\n            setTooltip({\n              visible: false,\n              x: 0,\n              y: 0,\n              text: \"\"\n            });\n          },\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            points: scaledPoints,\n            closed: true,\n            fill: getRoomColor(room),\n            stroke: isSelected ? \"#f59e42\" : isHovered ? \"#2563eb\" : \"#1e293b\",\n            strokeWidth: isSelected ? 4 : 2,\n            shadowBlur: isSelected ? 10 : 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            text: room.name,\n            x: cx - room.name.length * 4,\n            y: cy - 8,\n            fontSize: 16,\n            fill: \"#1e293b\",\n            fontStyle: \"bold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this), isSelected && /*#__PURE__*/_jsxDEV(Rect, {\n            x: Math.max(...scaledPoints.filter((_, i) => i % 2 === 0)) - 10,\n            y: Math.min(...scaledPoints.filter((_, i) => i % 2 === 1)) - 10,\n            width: 20,\n            height: 20,\n            fill: \"#f87171\",\n            cornerRadius: 4,\n            onClick: () => onDeleteRoom(idx),\n            onTap: () => onDeleteRoom(idx)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 17\n          }, this), isSelected && /*#__PURE__*/_jsxDEV(Text, {\n            text: \"\\uD83D\\uDDD1\",\n            x: Math.max(...scaledPoints.filter((_, i) => i % 2 === 0)) - 6,\n            y: Math.min(...scaledPoints.filter((_, i) => i % 2 === 1)) - 10,\n            fontSize: 16,\n            onClick: () => onDeleteRoom(idx),\n            onTap: () => onDeleteRoom(idx),\n            style: {\n              cursor: \"pointer\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this)]\n        }, room.name + idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this);\n      }), tooltip.visible && /*#__PURE__*/_jsxDEV(Group, {\n        children: [/*#__PURE__*/_jsxDEV(Rect, {\n          x: tooltip.x - 40,\n          y: tooltip.y - 24,\n          width: 80,\n          height: 22,\n          fill: \"#fff\",\n          stroke: \"#888\",\n          cornerRadius: 4,\n          shadowBlur: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          text: tooltip.text,\n          x: tooltip.x - 36,\n          y: tooltip.y - 22,\n          fontSize: 14,\n          fill: \"#1e293b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"yKqfLuabA4G5Ua2d08PqZwFkQW4=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useRef","useState","Stage","Layer","Line","Text","Group","Rect","getRoomColor","snapPointToGrid","jsxDEV","_jsxDEV","CANVAS_WIDTH","CANVAS_HEIGHT","GRID_SIZE","LayoutCanvas","layout","onSelectRoom","selectedRoom","onDeleteRoom","onUpdateRoom","_s","stageRef","scale","setScale","stagePos","setStagePos","x","y","hoveredRoom","setHoveredRoom","validRooms","filter","room","points","length","allPoints","flatMap","className","children","fileName","_jsxFileName","lineNumber","columnNumber","xs","map","p","ys","minX","Math","min","maxX","max","minY","maxY","margin","fitScale","displayScale","offsetX","offsetY","gridLines","i","push","stroke","strokeWidth","getCentroid","n","sum","reduce","acc","handleDragMove","idx","e","node","target","dx","_lastPos","dy","newPoints","handleDragStart","handleWheel","evt","preventDefault","scaleBy","oldScale","mousePointTo","current","newScale","deltaY","handleStageDragEnd","tooltip","setTooltip","visible","text","width","height","ref","scaleX","scaleY","draggable","onWheel","onDragEnd","style","background","borderRadius","scaledPoints","cx","cy","isSelected","isHovered","onDragStart","onDragMove","onClick","onTap","onMouseEnter","name","onMouseLeave","closed","fill","shadowBlur","fontSize","fontStyle","_","cornerRadius","cursor","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/INFRAMINDS/ChatBot/frontend/src/LayoutCanvas.jsx"],"sourcesContent":["// import React from \"react\";\r\n// import { Stage, Layer, Line, Text } from \"react-konva\";\r\n\r\n// export default function LayoutCanvas({ layout }) {\r\n//   const width = 600, height = 450;\r\n\r\n//   // Filter out rooms with less than 3 points (invalid polygons)\r\n//   const validRooms = layout.filter(room => room.points.length >= 3);\r\n\r\n//   // Compute scaling and centering\r\n//   const allPoints = validRooms.flatMap(room => room.points);\r\n//   if (allPoints.length === 0) {\r\n//     // Nothing to render\r\n//     return (\r\n//       <div className=\"text-gray-400 text-lg\">\r\n//         No valid rooms to display.\r\n//       </div>\r\n//     );\r\n//   }\r\n//   const xs = allPoints.map(p => p[0]);\r\n//   const ys = allPoints.map(p => p[1]);\r\n//   const minX = Math.min(...xs), maxX = Math.max(...xs);\r\n//   const minY = Math.min(...ys), maxY = Math.max(...ys);\r\n\r\n//   // Calculate scale to fit the canvas with some margin\r\n//   const margin = 40;\r\n//   const scale = Math.min(\r\n//     (width - margin * 2) / (maxX - minX || 1),\r\n//     (height - margin * 2) / (maxY - minY || 1)\r\n//   );\r\n//   const offsetX = margin - minX * scale + (width - (maxX - minX) * scale) / 2 - margin;\r\n//   const offsetY = margin - minY * scale + (height - (maxY - minY) * scale) / 2 - margin;\r\n\r\n//   // Helper to get centroid for label placement\r\n//   const getCentroid = (points) => {\r\n//     const n = points.length;\r\n//     const sum = points.reduce(\r\n//       (acc, [x, y]) => [acc[0] + x, acc[1] + y],\r\n//       [0, 0]\r\n//     );\r\n//     return [sum[0] / n, sum[1] / n];\r\n//   };\r\n\r\n//   return (\r\n//     <Stage width={width} height={height}>\r\n//       <Layer>\r\n//         {validRooms.map((room, idx) => {\r\n//           // Scale and center points\r\n//           const scaledPoints = room.points.flatMap(([x, y]) => [\r\n//             x * scale + offsetX,\r\n//             y * scale + offsetY,\r\n//           ]);\r\n//           // Centroid for label\r\n//           const [cx, cy] = getCentroid(\r\n//             room.points.map(([x, y]) => [\r\n//               x * scale + offsetX,\r\n//               y * scale + offsetY,\r\n//             ])\r\n//           );\r\n//           return (\r\n//             <React.Fragment key={room.name + idx}>\r\n//               <Line\r\n//                 points={scaledPoints}\r\n//                 closed\r\n//                 fill=\"#e0e7ff\"\r\n//                 stroke=\"#1e293b\"\r\n//                 strokeWidth={2}\r\n//               />\r\n//               <Text\r\n//                 text={room.name}\r\n//                 x={cx - room.name.length * 4}\r\n//                 y={cy - 8}\r\n//                 fontSize={16}\r\n//                 fill=\"#1e293b\"\r\n//                 fontStyle=\"bold\"\r\n//               />\r\n//             </React.Fragment>\r\n//           );\r\n//         })}\r\n//       </Layer>\r\n//     </Stage>\r\n//   );\r\n// }\r\n\r\n\r\n\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Stage, Layer, Line, Text, Group, Rect } from \"react-konva\";\r\nimport { getRoomColor, snapPointToGrid } from \"./utils/layoutHelpers\";\r\n\r\nconst CANVAS_WIDTH = 600;\r\nconst CANVAS_HEIGHT = 450;\r\nconst GRID_SIZE = 25;\r\n\r\nexport default function LayoutCanvas({\r\n  layout,\r\n  onSelectRoom,\r\n  selectedRoom,\r\n  onDeleteRoom,\r\n  onUpdateRoom,\r\n}) {\r\n  // Zoom and pan\r\n  const stageRef = useRef();\r\n  const [scale, setScale] = useState(1);\r\n  const [stagePos, setStagePos] = useState({ x: 0, y: 0 });\r\n  const [hoveredRoom, setHoveredRoom] = useState(null);\r\n\r\n  // Filter out rooms with less than 3 points\r\n  const validRooms = layout.filter((room) => room.points.length >= 3);\r\n\r\n  // Scaling and centering logic\r\n  const allPoints = validRooms.flatMap((room) => room.points);\r\n  if (allPoints.length === 0) {\r\n    return (\r\n      <div className=\"text-gray-400 text-lg\">\r\n        No valid rooms to display.\r\n      </div>\r\n    );\r\n  }\r\n  const xs = allPoints.map((p) => p[0]);\r\n  const ys = allPoints.map((p) => p[1]);\r\n  const minX = Math.min(...xs),\r\n    maxX = Math.max(...xs);\r\n  const minY = Math.min(...ys),\r\n    maxY = Math.max(...ys);\r\n\r\n  const margin = 40;\r\n  const fitScale = Math.min(\r\n    (CANVAS_WIDTH - margin * 2) / (maxX - minX || 1),\r\n    (CANVAS_HEIGHT - margin * 2) / (maxY - minY || 1)\r\n  );\r\n  // Use fitScale for initial fit, then user can zoom\r\n  const displayScale = scale * fitScale;\r\n  const offsetX =\r\n    margin - minX * displayScale +\r\n    (CANVAS_WIDTH - (maxX - minX) * displayScale) / 2 -\r\n    margin +\r\n    stagePos.x;\r\n  const offsetY =\r\n    margin - minY * displayScale +\r\n    (CANVAS_HEIGHT - (maxY - minY) * displayScale) / 2 -\r\n    margin +\r\n    stagePos.y;\r\n\r\n  // Grid lines\r\n  const gridLines = [];\r\n  for (let i = 0; i < CANVAS_WIDTH / (GRID_SIZE * displayScale); i++) {\r\n    gridLines.push(\r\n      <Line\r\n        key={\"v\" + i}\r\n        points={[\r\n          i * GRID_SIZE * displayScale,\r\n          0,\r\n          i * GRID_SIZE * displayScale,\r\n          CANVAS_HEIGHT,\r\n        ]}\r\n        stroke=\"#e5e7eb\"\r\n        strokeWidth={1}\r\n      />\r\n    );\r\n  }\r\n  for (let i = 0; i < CANVAS_HEIGHT / (GRID_SIZE * displayScale); i++) {\r\n    gridLines.push(\r\n      <Line\r\n        key={\"h\" + i}\r\n        points={[\r\n          0,\r\n          i * GRID_SIZE * displayScale,\r\n          CANVAS_WIDTH,\r\n          i * GRID_SIZE * displayScale,\r\n        ]}\r\n        stroke=\"#e5e7eb\"\r\n        strokeWidth={1}\r\n      />\r\n    );\r\n  }\r\n\r\n  // Helper: centroid for label\r\n  const getCentroid = (points) => {\r\n    const n = points.length;\r\n    const sum = points.reduce(\r\n      (acc, [x, y]) => [acc[0] + x, acc[1] + y],\r\n      [0, 0]\r\n    );\r\n    return [sum[0] / n, sum[1] / n];\r\n  };\r\n\r\n  // Drag/resize logic\r\n  const handleDragMove = (idx, e) => {\r\n    const node = e.target;\r\n    const dx = node.x() - node._lastPos.x;\r\n    const dy = node.y() - node._lastPos.y;\r\n    node._lastPos = { x: node.x(), y: node.y() };\r\n    const newPoints = layout[idx].points.map(([x, y]) => [\r\n      snapPointToGrid(x + dx / displayScale, GRID_SIZE),\r\n      snapPointToGrid(y + dy / displayScale, GRID_SIZE),\r\n    ]);\r\n    onUpdateRoom(idx, { ...layout[idx], points: newPoints });\r\n  };\r\n\r\n  const handleDragStart = (idx, e) => {\r\n    e.target._lastPos = { x: e.target.x(), y: e.target.y() };\r\n  };\r\n\r\n  // Zoom and pan handlers\r\n  const handleWheel = (e) => {\r\n    e.evt.preventDefault();\r\n    const scaleBy = 1.05;\r\n    const oldScale = scale;\r\n    const mousePointTo = {\r\n      x: (e.evt.x - stageRef.current.x()) / oldScale,\r\n      y: (e.evt.y - stageRef.current.y()) / oldScale,\r\n    };\r\n    const newScale =\r\n      e.evt.deltaY > 0 ? oldScale / scaleBy : oldScale * scaleBy;\r\n    setScale(Math.max(0.5, Math.min(3, newScale)));\r\n    setStagePos({\r\n      x: e.evt.x - mousePointTo.x * newScale,\r\n      y: e.evt.y - mousePointTo.y * newScale,\r\n    });\r\n  };\r\n\r\n  const handleStageDragEnd = (e) => {\r\n    setStagePos({ x: e.target.x(), y: e.target.y() });\r\n  };\r\n\r\n  // Tooltip\r\n  const [tooltip, setTooltip] = useState({ visible: false, x: 0, y: 0, text: \"\" });\r\n\r\n  return (\r\n    <Stage\r\n      width={CANVAS_WIDTH}\r\n      height={CANVAS_HEIGHT}\r\n      ref={stageRef}\r\n      scaleX={1}\r\n      scaleY={1}\r\n      draggable\r\n      x={stagePos.x}\r\n      y={stagePos.y}\r\n      onWheel={handleWheel}\r\n      onDragEnd={handleStageDragEnd}\r\n      style={{ background: \"#f9fafb\", borderRadius: 8 }}\r\n    >\r\n      <Layer>\r\n        {/* Grid */}\r\n        {gridLines}\r\n      </Layer>\r\n      <Layer>\r\n        {validRooms.map((room, idx) => {\r\n          const scaledPoints = room.points.flatMap(([x, y]) => [\r\n            x * displayScale + offsetX,\r\n            y * displayScale + offsetY,\r\n          ]);\r\n          const [cx, cy] = getCentroid(\r\n            room.points.map(([x, y]) => [\r\n              x * displayScale + offsetX,\r\n              y * displayScale + offsetY,\r\n            ])\r\n          );\r\n          const isSelected = selectedRoom === idx;\r\n          const isHovered = hoveredRoom === idx;\r\n          return (\r\n            <Group\r\n              key={room.name + idx}\r\n              draggable\r\n              onDragStart={(e) => handleDragStart(idx, e)}\r\n              onDragMove={(e) => handleDragMove(idx, e)}\r\n              onClick={() => onSelectRoom(idx)}\r\n              onTap={() => onSelectRoom(idx)}\r\n              onMouseEnter={() => {\r\n                setHoveredRoom(idx);\r\n                setTooltip({\r\n                  visible: true,\r\n                  x: cx,\r\n                  y: cy - 30,\r\n                  text: `Room: ${room.name}`,\r\n                });\r\n              }}\r\n              onMouseLeave={() => {\r\n                setHoveredRoom(null);\r\n                setTooltip({ visible: false, x: 0, y: 0, text: \"\" });\r\n              }}\r\n            >\r\n              <Line\r\n                points={scaledPoints}\r\n                closed\r\n                fill={getRoomColor(room)}\r\n                stroke={isSelected ? \"#f59e42\" : isHovered ? \"#2563eb\" : \"#1e293b\"}\r\n                strokeWidth={isSelected ? 4 : 2}\r\n                shadowBlur={isSelected ? 10 : 0}\r\n              />\r\n              <Text\r\n                text={room.name}\r\n                x={cx - room.name.length * 4}\r\n                y={cy - 8}\r\n                fontSize={16}\r\n                fill=\"#1e293b\"\r\n                fontStyle=\"bold\"\r\n              />\r\n              {/* Delete Button (top-right of polygon) */}\r\n              {isSelected && (\r\n                <Rect\r\n                  x={Math.max(...scaledPoints.filter((_, i) => i % 2 === 0)) - 10}\r\n                  y={Math.min(...scaledPoints.filter((_, i) => i % 2 === 1)) - 10}\r\n                  width={20}\r\n                  height={20}\r\n                  fill=\"#f87171\"\r\n                  cornerRadius={4}\r\n                  onClick={() => onDeleteRoom(idx)}\r\n                  onTap={() => onDeleteRoom(idx)}\r\n                />\r\n              )}\r\n              {isSelected && (\r\n                <Text\r\n                  text=\"🗑\"\r\n                  x={Math.max(...scaledPoints.filter((_, i) => i % 2 === 0)) - 6}\r\n                  y={Math.min(...scaledPoints.filter((_, i) => i % 2 === 1)) - 10}\r\n                  fontSize={16}\r\n                  onClick={() => onDeleteRoom(idx)}\r\n                  onTap={() => onDeleteRoom(idx)}\r\n                  style={{ cursor: \"pointer\" }}\r\n                />\r\n              )}\r\n            </Group>\r\n          );\r\n        })}\r\n        {/* Tooltip */}\r\n        {tooltip.visible && (\r\n          <Group>\r\n            <Rect\r\n              x={tooltip.x - 40}\r\n              y={tooltip.y - 24}\r\n              width={80}\r\n              height={22}\r\n              fill=\"#fff\"\r\n              stroke=\"#888\"\r\n              cornerRadius={4}\r\n              shadowBlur={2}\r\n            />\r\n            <Text\r\n              text={tooltip.text}\r\n              x={tooltip.x - 36}\r\n              y={tooltip.y - 22}\r\n              fontSize={14}\r\n              fill=\"#1e293b\"\r\n            />\r\n          </Group>\r\n        )}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}