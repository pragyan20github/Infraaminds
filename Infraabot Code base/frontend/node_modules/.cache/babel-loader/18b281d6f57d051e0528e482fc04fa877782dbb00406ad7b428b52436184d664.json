{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\INFRAMINDS\\\\ChatBot\\\\frontend\\\\src\\\\LayoutCanvas.jsx\";\nimport React from \"react\";\nimport { Stage, Layer, Line, Text } from \"react-konva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  layout\n}) {\n  const width = 600,\n    height = 450;\n\n  // Filter out rooms with less than 3 points (invalid polygons)\n  const validRooms = layout.filter(room => room.points.length >= 3);\n\n  // Compute scaling and centering\n  const allPoints = validRooms.flatMap(room => room.points);\n  if (allPoints.length === 0) {\n    // Nothing to render\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-400 text-lg\",\n      children: \"No valid rooms to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n  const xs = allPoints.map(p => p[0]);\n  const ys = allPoints.map(p => p[1]);\n  const minX = Math.min(...xs),\n    maxX = Math.max(...xs);\n  const minY = Math.min(...ys),\n    maxY = Math.max(...ys);\n\n  // Calculate scale to fit the canvas with some margin\n  const margin = 40;\n  const scale = Math.min((width - margin * 2) / (maxX - minX || 1), (height - margin * 2) / (maxY - minY || 1));\n  const offsetX = margin - minX * scale + (width - (maxX - minX) * scale) / 2 - margin;\n  const offsetY = margin - minY * scale + (height - (maxY - minY) * scale) / 2 - margin;\n\n  // Helper to get centroid for label placement\n  const getCentroid = points => {\n    const n = points.length;\n    const sum = points.reduce((acc, [x, y]) => [acc[0] + x, acc[1] + y], [0, 0]);\n    return [sum[0] / n, sum[1] / n];\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: width,\n    height: height,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: validRooms.map((room, idx) => {\n        // Scale and center points\n        const scaledPoints = room.points.flatMap(([x, y]) => [x * scale + offsetX, y * scale + offsetY]);\n        // Centroid for label\n        const [cx, cy] = getCentroid(room.points.map(([x, y]) => [x * scale + offsetX, y * scale + offsetY]));\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            points: scaledPoints,\n            closed: true,\n            fill: \"#e0e7ff\",\n            stroke: \"#1e293b\",\n            strokeWidth: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            text: room.name,\n            x: cx - room.name.length * 4,\n            y: cy - 8,\n            fontSize: 16,\n            fill: \"#1e293b\",\n            fontStyle: \"bold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)]\n        }, room.name + idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","Stage","Layer","Line","Text","jsxDEV","_jsxDEV","LayoutCanvas","layout","width","height","validRooms","filter","room","points","length","allPoints","flatMap","className","children","fileName","_jsxFileName","lineNumber","columnNumber","xs","map","p","ys","minX","Math","min","maxX","max","minY","maxY","margin","scale","offsetX","offsetY","getCentroid","n","sum","reduce","acc","x","y","idx","scaledPoints","cx","cy","Fragment","closed","fill","stroke","strokeWidth","text","name","fontSize","fontStyle","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/INFRAMINDS/ChatBot/frontend/src/LayoutCanvas.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Stage, Layer, Line, Text } from \"react-konva\";\r\n\r\nexport default function LayoutCanvas({ layout }) {\r\n  const width = 600, height = 450;\r\n\r\n  // Filter out rooms with less than 3 points (invalid polygons)\r\n  const validRooms = layout.filter(room => room.points.length >= 3);\r\n\r\n  // Compute scaling and centering\r\n  const allPoints = validRooms.flatMap(room => room.points);\r\n  if (allPoints.length === 0) {\r\n    // Nothing to render\r\n    return (\r\n      <div className=\"text-gray-400 text-lg\">\r\n        No valid rooms to display.\r\n      </div>\r\n    );\r\n  }\r\n  const xs = allPoints.map(p => p[0]);\r\n  const ys = allPoints.map(p => p[1]);\r\n  const minX = Math.min(...xs), maxX = Math.max(...xs);\r\n  const minY = Math.min(...ys), maxY = Math.max(...ys);\r\n\r\n  // Calculate scale to fit the canvas with some margin\r\n  const margin = 40;\r\n  const scale = Math.min(\r\n    (width - margin * 2) / (maxX - minX || 1),\r\n    (height - margin * 2) / (maxY - minY || 1)\r\n  );\r\n  const offsetX = margin - minX * scale + (width - (maxX - minX) * scale) / 2 - margin;\r\n  const offsetY = margin - minY * scale + (height - (maxY - minY) * scale) / 2 - margin;\r\n\r\n  // Helper to get centroid for label placement\r\n  const getCentroid = (points) => {\r\n    const n = points.length;\r\n    const sum = points.reduce(\r\n      (acc, [x, y]) => [acc[0] + x, acc[1] + y],\r\n      [0, 0]\r\n    );\r\n    return [sum[0] / n, sum[1] / n];\r\n  };\r\n\r\n  return (\r\n    <Stage width={width} height={height}>\r\n      <Layer>\r\n        {validRooms.map((room, idx) => {\r\n          // Scale and center points\r\n          const scaledPoints = room.points.flatMap(([x, y]) => [\r\n            x * scale + offsetX,\r\n            y * scale + offsetY,\r\n          ]);\r\n          // Centroid for label\r\n          const [cx, cy] = getCentroid(\r\n            room.points.map(([x, y]) => [\r\n              x * scale + offsetX,\r\n              y * scale + offsetY,\r\n            ])\r\n          );\r\n          return (\r\n            <React.Fragment key={room.name + idx}>\r\n              <Line\r\n                points={scaledPoints}\r\n                closed\r\n                fill=\"#e0e7ff\"\r\n                stroke=\"#1e293b\"\r\n                strokeWidth={2}\r\n              />\r\n              <Text\r\n                text={room.name}\r\n                x={cx - room.name.length * 4}\r\n                y={cy - 8}\r\n                fontSize={16}\r\n                fill=\"#1e293b\"\r\n                fontStyle=\"bold\"\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}