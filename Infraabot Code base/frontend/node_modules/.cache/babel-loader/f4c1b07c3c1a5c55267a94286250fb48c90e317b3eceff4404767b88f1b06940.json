{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\INFRAMINDS\\\\ChatBot\\\\frontend\\\\src\\\\LayoutCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Stage, Layer, Line, Text, Group, Rect, Transformer } from \"react-konva\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  layout,\n  onUpdateRoom,\n  selectedRoom,\n  onSelectRoom,\n  onDeleteRoom\n}) {\n  _s();\n  const width = 600,\n    height = 450;\n  const shapeRefs = useRef([]);\n  const trRef = useRef();\n\n  // Local state for hover\n  const [hoveredIdx, setHoveredIdx] = useState(null);\n\n  // Filter out rooms with less than 3 points (invalid polygons)\n  const validRooms = layout.filter(room => room.points.length >= 3);\n\n  // Compute scaling and centering\n  const allPoints = validRooms.flatMap(room => room.points);\n  if (allPoints.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-400 text-lg\",\n      children: \"No valid rooms to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n  const xs = allPoints.map(p => p[0]);\n  const ys = allPoints.map(p => p[1]);\n  const minX = Math.min(...xs),\n    maxX = Math.max(...xs);\n  const minY = Math.min(...ys),\n    maxY = Math.max(...ys);\n\n  // Calculate scale to fit the canvas with some margin\n  const margin = 40;\n  const scale = Math.min((width - margin * 2) / (maxX - minX || 1), (height - margin * 2) / (maxY - minY || 1));\n  const offsetX = margin - minX * scale + (width - (maxX - minX) * scale) / 2 - margin;\n  const offsetY = margin - minY * scale + (height - (maxY - minY) * scale) / 2 - margin;\n\n  // Helper to get centroid for label placement\n  const getCentroid = points => {\n    const n = points.length;\n    const sum = points.reduce((acc, [x, y]) => [acc[0] + x, acc[1] + y], [0, 0]);\n    return [sum[0] / n, sum[1] / n];\n  };\n\n  // Handle drag end: update room coordinates\n  const handleDragEnd = (idx, e) => {\n    const node = e.target;\n    const dx = node.x() / scale;\n    const dy = node.y() / scale;\n    const newPoints = layout[idx].points.map(([x, y]) => [x + dx, y + dy]);\n    node.position({\n      x: 0,\n      y: 0\n    });\n    if (onUpdateRoom) {\n      onUpdateRoom(idx, {\n        ...layout[idx],\n        points: newPoints\n      });\n    }\n  };\n\n  // Handle resize for rectangles (4-point polygons)\n  const handleTransformEnd = idx => {\n    const shape = shapeRefs.current[idx];\n    if (!shape) return;\n\n    // Get the scale applied by the transformer\n    const scaleX = shape.scaleX();\n    const scaleY = shape.scaleY();\n\n    // Get the original points (before scaling)\n    const points = layout[idx].points;\n    const [x0, y0] = points[0];\n    const [x1, y1] = points[1];\n    const [x2, y2] = points[2];\n    const [x3, y3] = points[3];\n\n    // Compute width and height from the original points\n    const width = Math.abs(x1 - x0);\n    const height = Math.abs(y3 - y0);\n\n    // Apply scale to width and height\n    const newWidth = width * scaleX;\n    const newHeight = height * scaleY;\n\n    // Calculate new points for the rectangle\n    const newPoints = [[x0, y0], [x0 + newWidth, y0], [x0 + newWidth, y0 + newHeight], [x0, y0 + newHeight]];\n\n    // Reset the scale to 1\n    shape.scaleX(1);\n    shape.scaleY(1);\n    onUpdateRoom(idx, {\n      ...layout[idx],\n      points: newPoints\n    });\n  };\n\n  // Attach transformer to the selected room\n  useEffect(() => {\n    if (trRef.current && selectedRoom !== null && shapeRefs.current[selectedRoom]) {\n      trRef.current.nodes([shapeRefs.current[selectedRoom]]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [selectedRoom, layout]);\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: width,\n    height: height,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: validRooms.map((room, idx) => {\n        // Scale and center points\n        const scaledPoints = room.points.flatMap(([x, y]) => [x * scale + offsetX, y * scale + offsetY]);\n        // Centroid for label\n        const [cx, cy] = getCentroid(room.points.map(([x, y]) => [x * scale + offsetX, y * scale + offsetY]));\n        const isSelected = selectedRoom === idx;\n        const isHovered = hoveredIdx === idx;\n\n        // Find top-right corner for delete icon\n        const xs = scaledPoints.filter((_, i) => i % 2 === 0);\n        const ys = scaledPoints.filter((_, i) => i % 2 === 1);\n        const topRightX = Math.max(...xs);\n        const topRightY = Math.min(...ys);\n        return /*#__PURE__*/_jsxDEV(Group, {\n          draggable: true,\n          onDragEnd: e => handleDragEnd(idx, e),\n          onMouseEnter: () => setHoveredIdx(idx),\n          onMouseLeave: () => setHoveredIdx(null),\n          onClick: () => onSelectRoom(idx),\n          onTap: () => onSelectRoom(idx),\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            ref: node => shapeRefs.current[idx] = node,\n            points: scaledPoints,\n            closed: true,\n            fill: \"#e0e7ff\",\n            stroke: isSelected ? \"#f59e42\" : isHovered ? \"#2563eb\" : \"#1e293b\",\n            strokeWidth: isSelected ? 4 : isHovered ? 3 : 2,\n            shadowBlur: isSelected ? 8 : 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            text: room.name,\n            x: cx,\n            y: cy,\n            fontSize: 16,\n            fill: \"#1e293b\",\n            fontStyle: \"bold\",\n            align: \"center\",\n            verticalAlign: \"middle\",\n            offsetX: room.name.length * 8,\n            offsetY: 8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), isSelected && onDeleteRoom && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Rect, {\n              x: topRightX - 10,\n              y: topRightY - 10,\n              width: 20,\n              height: 20,\n              fill: \"#f87171\",\n              cornerRadius: 4,\n              onClick: () => onDeleteRoom(idx),\n              onTap: () => onDeleteRoom(idx),\n              style: {\n                cursor: \"pointer\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              text: \"\\uD83D\\uDDD1\",\n              x: topRightX - 6,\n              y: topRightY - 10,\n              fontSize: 16,\n              onClick: () => onDeleteRoom(idx),\n              onTap: () => onDeleteRoom(idx),\n              style: {\n                cursor: \"pointer\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), isSelected && room.points.length === 4 && /*#__PURE__*/_jsxDEV(Transformer, {\n            ref: trRef,\n            boundBoxFunc: (oldBox, newBox) => newBox,\n            onTransformEnd: () => handleTransformEnd(idx),\n            rotateEnabled: false,\n            enabledAnchors: [\"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this)]\n        }, room.name + idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"5czcpnImJiA7JzMoNwVkAcOjREg=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Stage","Layer","Line","Text","Group","Rect","Transformer","jsxDEV","_jsxDEV","Fragment","_Fragment","LayoutCanvas","layout","onUpdateRoom","selectedRoom","onSelectRoom","onDeleteRoom","_s","width","height","shapeRefs","trRef","hoveredIdx","setHoveredIdx","validRooms","filter","room","points","length","allPoints","flatMap","className","children","fileName","_jsxFileName","lineNumber","columnNumber","xs","map","p","ys","minX","Math","min","maxX","max","minY","maxY","margin","scale","offsetX","offsetY","getCentroid","n","sum","reduce","acc","x","y","handleDragEnd","idx","e","node","target","dx","dy","newPoints","position","handleTransformEnd","shape","current","scaleX","scaleY","x0","y0","x1","y1","x2","y2","x3","y3","abs","newWidth","newHeight","nodes","getLayer","batchDraw","scaledPoints","cx","cy","isSelected","isHovered","_","i","topRightX","topRightY","draggable","onDragEnd","onMouseEnter","onMouseLeave","onClick","onTap","ref","closed","fill","stroke","strokeWidth","shadowBlur","text","name","fontSize","fontStyle","align","verticalAlign","cornerRadius","style","cursor","boundBoxFunc","oldBox","newBox","onTransformEnd","rotateEnabled","enabledAnchors","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/INFRAMINDS/ChatBot/frontend/src/LayoutCanvas.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Stage, Layer, Line, Text, Group, Rect, Transformer } from \"react-konva\";\r\n\r\nexport default function LayoutCanvas({\r\n  layout,\r\n  onUpdateRoom,\r\n  selectedRoom,\r\n  onSelectRoom,\r\n  onDeleteRoom,\r\n}) {\r\n  const width = 600, height = 450;\r\n  const shapeRefs = useRef([]);\r\n  const trRef = useRef();\r\n\r\n  // Local state for hover\r\n  const [hoveredIdx, setHoveredIdx] = useState(null);\r\n\r\n  // Filter out rooms with less than 3 points (invalid polygons)\r\n  const validRooms = layout.filter(room => room.points.length >= 3);\r\n\r\n  // Compute scaling and centering\r\n  const allPoints = validRooms.flatMap(room => room.points);\r\n  if (allPoints.length === 0) {\r\n    return (\r\n      <div className=\"text-gray-400 text-lg\">\r\n        No valid rooms to display.\r\n      </div>\r\n    );\r\n  }\r\n  const xs = allPoints.map(p => p[0]);\r\n  const ys = allPoints.map(p => p[1]);\r\n  const minX = Math.min(...xs), maxX = Math.max(...xs);\r\n  const minY = Math.min(...ys), maxY = Math.max(...ys);\r\n\r\n  // Calculate scale to fit the canvas with some margin\r\n  const margin = 40;\r\n  const scale = Math.min(\r\n    (width - margin * 2) / (maxX - minX || 1),\r\n    (height - margin * 2) / (maxY - minY || 1)\r\n  );\r\n  const offsetX = margin - minX * scale + (width - (maxX - minX) * scale) / 2 - margin;\r\n  const offsetY = margin - minY * scale + (height - (maxY - minY) * scale) / 2 - margin;\r\n\r\n  // Helper to get centroid for label placement\r\n  const getCentroid = (points) => {\r\n    const n = points.length;\r\n    const sum = points.reduce(\r\n      (acc, [x, y]) => [acc[0] + x, acc[1] + y],\r\n      [0, 0]\r\n    );\r\n    return [sum[0] / n, sum[1] / n];\r\n  };\r\n\r\n  // Handle drag end: update room coordinates\r\n  const handleDragEnd = (idx, e) => {\r\n    const node = e.target;\r\n    const dx = node.x() / scale;\r\n    const dy = node.y() / scale;\r\n    const newPoints = layout[idx].points.map(([x, y]) => [x + dx, y + dy]);\r\n    node.position({ x: 0, y: 0 });\r\n    if (onUpdateRoom) {\r\n      onUpdateRoom(idx, { ...layout[idx], points: newPoints });\r\n    }\r\n  };\r\n\r\n  // Handle resize for rectangles (4-point polygons)\r\nconst handleTransformEnd = (idx) => {\r\n  const shape = shapeRefs.current[idx];\r\n  if (!shape) return;\r\n\r\n  // Get the scale applied by the transformer\r\n  const scaleX = shape.scaleX();\r\n  const scaleY = shape.scaleY();\r\n\r\n  // Get the original points (before scaling)\r\n  const points = layout[idx].points;\r\n  const [x0, y0] = points[0];\r\n  const [x1, y1] = points[1];\r\n  const [x2, y2] = points[2];\r\n  const [x3, y3] = points[3];\r\n\r\n  // Compute width and height from the original points\r\n  const width = Math.abs(x1 - x0);\r\n  const height = Math.abs(y3 - y0);\r\n\r\n  // Apply scale to width and height\r\n  const newWidth = width * scaleX;\r\n  const newHeight = height * scaleY;\r\n\r\n  // Calculate new points for the rectangle\r\n  const newPoints = [\r\n    [x0, y0],\r\n    [x0 + newWidth, y0],\r\n    [x0 + newWidth, y0 + newHeight],\r\n    [x0, y0 + newHeight],\r\n  ];\r\n\r\n  // Reset the scale to 1\r\n  shape.scaleX(1);\r\n  shape.scaleY(1);\r\n\r\n  onUpdateRoom(idx, { ...layout[idx], points: newPoints });\r\n};\r\n\r\n\r\n  // Attach transformer to the selected room\r\n  useEffect(() => {\r\n    if (trRef.current && selectedRoom !== null && shapeRefs.current[selectedRoom]) {\r\n      trRef.current.nodes([shapeRefs.current[selectedRoom]]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [selectedRoom, layout]);\r\n\r\n  return (\r\n    <Stage width={width} height={height}>\r\n      <Layer>\r\n        {validRooms.map((room, idx) => {\r\n          // Scale and center points\r\n          const scaledPoints = room.points.flatMap(([x, y]) => [\r\n            x * scale + offsetX,\r\n            y * scale + offsetY,\r\n          ]);\r\n          // Centroid for label\r\n          const [cx, cy] = getCentroid(\r\n            room.points.map(([x, y]) => [\r\n              x * scale + offsetX,\r\n              y * scale + offsetY,\r\n            ])\r\n          );\r\n          const isSelected = selectedRoom === idx;\r\n          const isHovered = hoveredIdx === idx;\r\n\r\n          // Find top-right corner for delete icon\r\n          const xs = scaledPoints.filter((_, i) => i % 2 === 0);\r\n          const ys = scaledPoints.filter((_, i) => i % 2 === 1);\r\n          const topRightX = Math.max(...xs);\r\n          const topRightY = Math.min(...ys);\r\n\r\n          return (\r\n            <Group\r\n              key={room.name + idx}\r\n              draggable\r\n              onDragEnd={e => handleDragEnd(idx, e)}\r\n              onMouseEnter={() => setHoveredIdx(idx)}\r\n              onMouseLeave={() => setHoveredIdx(null)}\r\n              onClick={() => onSelectRoom(idx)}\r\n              onTap={() => onSelectRoom(idx)}\r\n            >\r\n              <Line\r\n                ref={node => (shapeRefs.current[idx] = node)}\r\n                points={scaledPoints}\r\n                closed\r\n                fill=\"#e0e7ff\"\r\n                stroke={\r\n                  isSelected ? \"#f59e42\" : isHovered ? \"#2563eb\" : \"#1e293b\"\r\n                }\r\n                strokeWidth={isSelected ? 4 : isHovered ? 3 : 2}\r\n                shadowBlur={isSelected ? 8 : 0}\r\n              />\r\n              <Text\r\n                text={room.name}\r\n                x={cx}\r\n                y={cy}\r\n                fontSize={16}\r\n                fill=\"#1e293b\"\r\n                fontStyle=\"bold\"\r\n                align=\"center\"\r\n                verticalAlign=\"middle\"\r\n                offsetX={room.name.length * 8}\r\n                offsetY={8}\r\n                />\r\n\r\n              {/* Delete button/icon */}\r\n              {isSelected && onDeleteRoom && (\r\n                <>\r\n                  <Rect\r\n                    x={topRightX - 10}\r\n                    y={topRightY - 10}\r\n                    width={20}\r\n                    height={20}\r\n                    fill=\"#f87171\"\r\n                    cornerRadius={4}\r\n                    onClick={() => onDeleteRoom(idx)}\r\n                    onTap={() => onDeleteRoom(idx)}\r\n                    style={{ cursor: \"pointer\" }}\r\n                  />\r\n                  <Text\r\n                    text=\"🗑\"\r\n                    x={topRightX - 6}\r\n                    y={topRightY - 10}\r\n                    fontSize={16}\r\n                    onClick={() => onDeleteRoom(idx)}\r\n                    onTap={() => onDeleteRoom(idx)}\r\n                    style={{ cursor: \"pointer\" }}\r\n                  />\r\n                </>\r\n              )}\r\n              {/* Transformer for resizing rectangles */}\r\n              {isSelected && room.points.length === 4 && (\r\n                <Transformer\r\n                  ref={trRef}\r\n                  boundBoxFunc={(oldBox, newBox) => newBox}\r\n                  onTransformEnd={() => handleTransformEnd(idx)}\r\n                  rotateEnabled={false}\r\n                  enabledAnchors={[\r\n                    \"top-left\",\r\n                    \"top-right\",\r\n                    \"bottom-left\",\r\n                    \"bottom-right\",\r\n                  ]}\r\n                />\r\n              )}\r\n            </Group>\r\n          );\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}