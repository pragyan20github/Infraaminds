{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\INFRAMINDS\\\\ChatBot\\\\frontend\\\\src\\\\LayoutCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Stage, Layer, Line, Text, Group, Rect, Transformer } from \"react-konva\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  layout,\n  onUpdateRoom,\n  selectedRoom,\n  onSelectRoom,\n  onDeleteRoom,\n  plotDimensions = {\n    width: 200,\n    height: 150\n  } // Default plot area\n}) {\n  _s();\n  const width = 600,\n    height = 450;\n  const shapeRefs = useRef([]);\n  const trRef = useRef();\n\n  // Local state for hover\n  const [hoveredIdx, setHoveredIdx] = useState(null);\n\n  // Attach transformer to the selected room (HOOK MUST BE BEFORE ANY RETURN)\n  useEffect(() => {\n    if (trRef.current && selectedRoom !== null && shapeRefs.current[selectedRoom]) {\n      trRef.current.nodes([shapeRefs.current[selectedRoom]]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [selectedRoom, layout]);\n\n  // Filter out rooms with less than 3 points (invalid polygons)\n  const validRooms = layout.filter(room => room.points.length >= 3);\n\n  // Always scale/center relative to the plot area, not the rooms\n  const margin = 40;\n  const plotWidth = plotDimensions.width;\n  const plotHeight = plotDimensions.height;\n  const scale = Math.min((width - margin * 2) / plotWidth, (height - margin * 2) / plotHeight);\n  const offsetX = margin + (width - plotWidth * scale) / 2;\n  const offsetY = margin + (height - plotHeight * scale) / 2;\n\n  // Helper to get centroid for label placement (in plot space)\n  const getCentroid = points => {\n    const n = points.length;\n    const sum = points.reduce((acc, [x, y]) => [acc[0] + x, acc[1] + y], [0, 0]);\n    return [sum[0] / n, sum[1] / n];\n  };\n\n  // Handle drag end: update room coordinates and constrain to plot area\n  const handleDragEnd = (idx, e) => {\n    const node = e.target;\n    const dx = node.x() / scale;\n    const dy = node.y() / scale;\n    const currentPoints = layout[idx].points;\n    let minX = Infinity,\n      minY = Infinity,\n      maxX = -Infinity,\n      maxY = -Infinity;\n    currentPoints.forEach(([x, y]) => {\n      minX = Math.min(minX, x);\n      minY = Math.min(minY, y);\n      maxX = Math.max(maxX, x);\n      maxY = Math.max(maxY, y);\n    });\n\n    // Proposed new bounding box\n    let allowedDx = dx,\n      allowedDy = dy;\n    if (minX + dx < 0) allowedDx = -minX;\n    if (maxX + dx > plotWidth) allowedDx = plotWidth - maxX;\n    if (minY + dy < 0) allowedDy = -minY;\n    if (maxY + dy > plotHeight) allowedDy = plotHeight - maxY;\n    const newPoints = currentPoints.map(([x, y]) => [x + allowedDx, y + allowedDy]);\n    node.position({\n      x: 0,\n      y: 0\n    });\n    if (onUpdateRoom) {\n      onUpdateRoom(idx, {\n        ...layout[idx],\n        points: newPoints\n      });\n    }\n  };\n\n  // Handle resize for rectangles (4-point polygons)\n  const handleTransformEnd = idx => {\n    const shape = shapeRefs.current[idx];\n    if (!shape) return;\n\n    // Get the scale applied by the transformer\n    const scaleX = shape.scaleX();\n    const scaleY = shape.scaleY();\n\n    // Get the original points (before scaling)\n    const points = layout[idx].points;\n    const [x0, y0] = points[0];\n    const [x1, y1] = points[1];\n    const [x2, y2] = points[2];\n    const [x3, y3] = points[3];\n\n    // Compute width and height from the original points\n    const width0 = Math.abs(x1 - x0);\n    const height0 = Math.abs(y3 - y0);\n\n    // Apply scale to width and height\n    let newWidth = width0 * scaleX;\n    let newHeight = height0 * scaleY;\n\n    // Constrain resizing to plot area\n    let maxWidth = plotWidth - x0;\n    let maxHeight = plotHeight - y0;\n    newWidth = Math.max(10, Math.min(newWidth, maxWidth));\n    newHeight = Math.max(10, Math.min(newHeight, maxHeight));\n\n    // Calculate new points for the rectangle\n    const newPoints = [[x0, y0], [x0 + newWidth, y0], [x0 + newWidth, y0 + newHeight], [x0, y0 + newHeight]];\n\n    // Reset the scale to 1\n    shape.scaleX(1);\n    shape.scaleY(1);\n    onUpdateRoom(idx, {\n      ...layout[idx],\n      points: newPoints\n    });\n  };\n  if (validRooms.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-400 text-lg\",\n      children: \"No valid rooms to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: width,\n    height: height,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [/*#__PURE__*/_jsxDEV(Rect, {\n        x: offsetX,\n        y: offsetY,\n        width: plotWidth * scale,\n        height: plotHeight * scale,\n        stroke: \"#000\",\n        strokeWidth: 2,\n        fill: \"transparent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), validRooms.map((room, idx) => {\n        // Always map room coordinates from plot space to canvas space\n        const scaledPoints = room.points.flatMap(([x, y]) => [x * scale + offsetX, y * scale + offsetY]);\n        // Centroid for label\n        const [cx, cy] = getCentroid(room.points.map(([x, y]) => [x * scale + offsetX, y * scale + offsetY]));\n        const isSelected = selectedRoom === idx;\n        const isHovered = hoveredIdx === idx;\n\n        // Find top-right corner for delete icon\n        const xs = scaledPoints.filter((_, i) => i % 2 === 0);\n        const ys = scaledPoints.filter((_, i) => i % 2 === 1);\n        const topRightX = Math.max(...xs);\n        const topRightY = Math.min(...ys);\n        return /*#__PURE__*/_jsxDEV(Group, {\n          draggable: true,\n          onDragEnd: e => handleDragEnd(idx, e),\n          onMouseEnter: () => setHoveredIdx(idx),\n          onMouseLeave: () => setHoveredIdx(null),\n          onClick: () => onSelectRoom(idx),\n          onTap: () => onSelectRoom(idx),\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            ref: node => shapeRefs.current[idx] = node,\n            points: scaledPoints,\n            closed: true,\n            fill: \"#e0e7ff\",\n            stroke: isSelected ? \"#f59e42\" : isHovered ? \"#2563eb\" : \"#1e293b\",\n            strokeWidth: isSelected ? 4 : isHovered ? 3 : 2,\n            shadowBlur: isSelected ? 8 : 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            text: room.name,\n            x: cx,\n            y: cy,\n            fontSize: 16,\n            fill: \"#1e293b\",\n            fontStyle: \"bold\",\n            align: \"center\",\n            verticalAlign: \"middle\",\n            offsetX: room.name.length * 8,\n            offsetY: 8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), isSelected && onDeleteRoom && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Rect, {\n              x: topRightX - 10,\n              y: topRightY - 10,\n              width: 20,\n              height: 20,\n              fill: \"#f87171\",\n              cornerRadius: 4,\n              onClick: () => onDeleteRoom(idx),\n              onTap: () => onDeleteRoom(idx),\n              style: {\n                cursor: \"pointer\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              text: \"\\uD83D\\uDDD1\",\n              x: topRightX - 6,\n              y: topRightY - 10,\n              fontSize: 16,\n              onClick: () => onDeleteRoom(idx),\n              onTap: () => onDeleteRoom(idx),\n              style: {\n                cursor: \"pointer\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), isSelected && room.points.length === 4 && /*#__PURE__*/_jsxDEV(Transformer, {\n            ref: trRef,\n            boundBoxFunc: (oldBox, newBox) => newBox,\n            onTransformEnd: () => handleTransformEnd(idx),\n            rotateEnabled: false,\n            enabledAnchors: [\"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this)]\n        }, room.name + idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"5czcpnImJiA7JzMoNwVkAcOjREg=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Stage","Layer","Line","Text","Group","Rect","Transformer","jsxDEV","_jsxDEV","Fragment","_Fragment","LayoutCanvas","layout","onUpdateRoom","selectedRoom","onSelectRoom","onDeleteRoom","plotDimensions","width","height","_s","shapeRefs","trRef","hoveredIdx","setHoveredIdx","current","nodes","getLayer","batchDraw","validRooms","filter","room","points","length","margin","plotWidth","plotHeight","scale","Math","min","offsetX","offsetY","getCentroid","n","sum","reduce","acc","x","y","handleDragEnd","idx","e","node","target","dx","dy","currentPoints","minX","Infinity","minY","maxX","maxY","forEach","max","allowedDx","allowedDy","newPoints","map","position","handleTransformEnd","shape","scaleX","scaleY","x0","y0","x1","y1","x2","y2","x3","y3","width0","abs","height0","newWidth","newHeight","maxWidth","maxHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","stroke","strokeWidth","fill","scaledPoints","flatMap","cx","cy","isSelected","isHovered","xs","_","i","ys","topRightX","topRightY","draggable","onDragEnd","onMouseEnter","onMouseLeave","onClick","onTap","ref","closed","shadowBlur","text","name","fontSize","fontStyle","align","verticalAlign","cornerRadius","style","cursor","boundBoxFunc","oldBox","newBox","onTransformEnd","rotateEnabled","enabledAnchors","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/INFRAMINDS/ChatBot/frontend/src/LayoutCanvas.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Stage, Layer, Line, Text, Group, Rect, Transformer } from \"react-konva\";\r\n\r\nexport default function LayoutCanvas({\r\n  layout,\r\n  onUpdateRoom,\r\n  selectedRoom,\r\n  onSelectRoom,\r\n  onDeleteRoom,\r\n  plotDimensions = { width: 200, height: 150 }, // Default plot area\r\n}) {\r\n  const width = 600, height = 450;\r\n  const shapeRefs = useRef([]);\r\n  const trRef = useRef();\r\n\r\n  // Local state for hover\r\n  const [hoveredIdx, setHoveredIdx] = useState(null);\r\n\r\n  // Attach transformer to the selected room (HOOK MUST BE BEFORE ANY RETURN)\r\n  useEffect(() => {\r\n    if (trRef.current && selectedRoom !== null && shapeRefs.current[selectedRoom]) {\r\n      trRef.current.nodes([shapeRefs.current[selectedRoom]]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [selectedRoom, layout]);\r\n\r\n  // Filter out rooms with less than 3 points (invalid polygons)\r\n  const validRooms = layout.filter(room => room.points.length >= 3);\r\n\r\n  // Always scale/center relative to the plot area, not the rooms\r\n  const margin = 40;\r\n  const plotWidth = plotDimensions.width;\r\n  const plotHeight = plotDimensions.height;\r\n\r\n  const scale = Math.min(\r\n    (width - margin * 2) / plotWidth,\r\n    (height - margin * 2) / plotHeight\r\n  );\r\n\r\n  const offsetX = margin + (width - plotWidth * scale) / 2;\r\n  const offsetY = margin + (height - plotHeight * scale) / 2;\r\n\r\n  // Helper to get centroid for label placement (in plot space)\r\n  const getCentroid = (points) => {\r\n    const n = points.length;\r\n    const sum = points.reduce(\r\n      (acc, [x, y]) => [acc[0] + x, acc[1] + y],\r\n      [0, 0]\r\n    );\r\n    return [sum[0] / n, sum[1] / n];\r\n  };\r\n\r\n  // Handle drag end: update room coordinates and constrain to plot area\r\n  const handleDragEnd = (idx, e) => {\r\n    const node = e.target;\r\n    const dx = node.x() / scale;\r\n    const dy = node.y() / scale;\r\n\r\n    const currentPoints = layout[idx].points;\r\n    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n    currentPoints.forEach(([x, y]) => {\r\n      minX = Math.min(minX, x);\r\n      minY = Math.min(minY, y);\r\n      maxX = Math.max(maxX, x);\r\n      maxY = Math.max(maxY, y);\r\n    });\r\n\r\n    // Proposed new bounding box\r\n    let allowedDx = dx, allowedDy = dy;\r\n    if (minX + dx < 0) allowedDx = -minX;\r\n    if (maxX + dx > plotWidth) allowedDx = plotWidth - maxX;\r\n    if (minY + dy < 0) allowedDy = -minY;\r\n    if (maxY + dy > plotHeight) allowedDy = plotHeight - maxY;\r\n\r\n    const newPoints = currentPoints.map(([x, y]) => [\r\n      x + allowedDx,\r\n      y + allowedDy,\r\n    ]);\r\n    node.position({ x: 0, y: 0 });\r\n    if (onUpdateRoom) {\r\n      onUpdateRoom(idx, { ...layout[idx], points: newPoints });\r\n    }\r\n  };\r\n\r\n  // Handle resize for rectangles (4-point polygons)\r\n  const handleTransformEnd = (idx) => {\r\n    const shape = shapeRefs.current[idx];\r\n    if (!shape) return;\r\n\r\n    // Get the scale applied by the transformer\r\n    const scaleX = shape.scaleX();\r\n    const scaleY = shape.scaleY();\r\n\r\n    // Get the original points (before scaling)\r\n    const points = layout[idx].points;\r\n    const [x0, y0] = points[0];\r\n    const [x1, y1] = points[1];\r\n    const [x2, y2] = points[2];\r\n    const [x3, y3] = points[3];\r\n\r\n    // Compute width and height from the original points\r\n    const width0 = Math.abs(x1 - x0);\r\n    const height0 = Math.abs(y3 - y0);\r\n\r\n    // Apply scale to width and height\r\n    let newWidth = width0 * scaleX;\r\n    let newHeight = height0 * scaleY;\r\n\r\n    // Constrain resizing to plot area\r\n    let maxWidth = plotWidth - x0;\r\n    let maxHeight = plotHeight - y0;\r\n    newWidth = Math.max(10, Math.min(newWidth, maxWidth));\r\n    newHeight = Math.max(10, Math.min(newHeight, maxHeight));\r\n\r\n    // Calculate new points for the rectangle\r\n    const newPoints = [\r\n      [x0, y0],\r\n      [x0 + newWidth, y0],\r\n      [x0 + newWidth, y0 + newHeight],\r\n      [x0, y0 + newHeight],\r\n    ];\r\n\r\n    // Reset the scale to 1\r\n    shape.scaleX(1);\r\n    shape.scaleY(1);\r\n\r\n    onUpdateRoom(idx, { ...layout[idx], points: newPoints });\r\n  };\r\n\r\n  if (validRooms.length === 0) {\r\n    return (\r\n      <div className=\"text-gray-400 text-lg\">\r\n        No valid rooms to display.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Stage width={width} height={height}>\r\n      <Layer>\r\n        {/* Plot area border */}\r\n        <Rect\r\n          x={offsetX}\r\n          y={offsetY}\r\n          width={plotWidth * scale}\r\n          height={plotHeight * scale}\r\n          stroke=\"#000\"\r\n          strokeWidth={2}\r\n          fill=\"transparent\"\r\n        />\r\n\r\n        {validRooms.map((room, idx) => {\r\n          // Always map room coordinates from plot space to canvas space\r\n          const scaledPoints = room.points.flatMap(([x, y]) => [\r\n            x * scale + offsetX,\r\n            y * scale + offsetY,\r\n          ]);\r\n          // Centroid for label\r\n          const [cx, cy] = getCentroid(\r\n            room.points.map(([x, y]) => [\r\n              x * scale + offsetX,\r\n              y * scale + offsetY,\r\n            ])\r\n          );\r\n          const isSelected = selectedRoom === idx;\r\n          const isHovered = hoveredIdx === idx;\r\n\r\n          // Find top-right corner for delete icon\r\n          const xs = scaledPoints.filter((_, i) => i % 2 === 0);\r\n          const ys = scaledPoints.filter((_, i) => i % 2 === 1);\r\n          const topRightX = Math.max(...xs);\r\n          const topRightY = Math.min(...ys);\r\n\r\n          return (\r\n            <Group\r\n              key={room.name + idx}\r\n              draggable\r\n              onDragEnd={e => handleDragEnd(idx, e)}\r\n              onMouseEnter={() => setHoveredIdx(idx)}\r\n              onMouseLeave={() => setHoveredIdx(null)}\r\n              onClick={() => onSelectRoom(idx)}\r\n              onTap={() => onSelectRoom(idx)}\r\n            >\r\n              <Line\r\n                ref={node => (shapeRefs.current[idx] = node)}\r\n                points={scaledPoints}\r\n                closed\r\n                fill=\"#e0e7ff\"\r\n                stroke={\r\n                  isSelected ? \"#f59e42\" : isHovered ? \"#2563eb\" : \"#1e293b\"\r\n                }\r\n                strokeWidth={isSelected ? 4 : isHovered ? 3 : 2}\r\n                shadowBlur={isSelected ? 8 : 0}\r\n              />\r\n              <Text\r\n                text={room.name}\r\n                x={cx}\r\n                y={cy}\r\n                fontSize={16}\r\n                fill=\"#1e293b\"\r\n                fontStyle=\"bold\"\r\n                align=\"center\"\r\n                verticalAlign=\"middle\"\r\n                offsetX={room.name.length * 8}\r\n                offsetY={8}\r\n              />\r\n\r\n              {/* Delete button/icon */}\r\n              {isSelected && onDeleteRoom && (\r\n                <>\r\n                  <Rect\r\n                    x={topRightX - 10}\r\n                    y={topRightY - 10}\r\n                    width={20}\r\n                    height={20}\r\n                    fill=\"#f87171\"\r\n                    cornerRadius={4}\r\n                    onClick={() => onDeleteRoom(idx)}\r\n                    onTap={() => onDeleteRoom(idx)}\r\n                    style={{ cursor: \"pointer\" }}\r\n                  />\r\n                  <Text\r\n                    text=\"🗑\"\r\n                    x={topRightX - 6}\r\n                    y={topRightY - 10}\r\n                    fontSize={16}\r\n                    onClick={() => onDeleteRoom(idx)}\r\n                    onTap={() => onDeleteRoom(idx)}\r\n                    style={{ cursor: \"pointer\" }}\r\n                  />\r\n                </>\r\n              )}\r\n              {/* Transformer for resizing rectangles */}\r\n              {isSelected && room.points.length === 4 && (\r\n                <Transformer\r\n                  ref={trRef}\r\n                  boundBoxFunc={(oldBox, newBox) => newBox}\r\n                  onTransformEnd={() => handleTransformEnd(idx)}\r\n                  rotateEnabled={false}\r\n                  enabledAnchors={[\r\n                    \"top-left\",\r\n                    \"top-right\",\r\n                    \"bottom-left\",\r\n                    \"bottom-right\",\r\n                  ]}\r\n                />\r\n              )}\r\n            </Group>\r\n          );\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}